Starting code feedback for Lizzie, Week2

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 8.04 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week4, HPC, week1, week2, week7, Project, .git, MiniProject, week3, Feedback

Found the following files in parent directory: .gitignore, README.md, Notes.txt

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.pdf
*.aux
*.bbl
*.log
*.blg

.idea/
.Rproj.user

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## **My CMEE Coursework Repository**

This contains all coursework materials from practical work in the Computational Methods in Ecology and Evolution course at Imperial College London Silwood Park, which is guided by the [**The Multilingual Quantitative Biologist**](https://mhasoba.github.io/TheMulQuaBio/intro.html) online book.

### **Languages**

BASH version 5.0.17(1)

TeX 3.14159265 (TeX Live 2019/Debian)

### **Dependencies**

imagemagick

bc

### **Contents** 

[**Week 1**](week1)
- this directory contains coursework materials from week 1 of practical work, covering the following topics:
1. [UNIX and Linux](https://mhasoba.github.io/TheMulQuaBio/notebooks/01-Unix.html#)
2. [Shell scripting](https://mhasoba.github.io/TheMulQuaBio/notebooks/02-ShellScripting.html)
3. [Version control with Git](https://mhasoba.github.io/TheMulQuaBio/notebooks/03-Git.html)
4. [Scientific documents with LaTeX](https://mhasoba.github.io/TheMulQuaBio/notebooks/04-LaTeX.html)

### **Usage**

Instructions for usage of specific files in this repository can be found in the week-specific README files.

### **Author name and contact**

Lizzie Bru
eab21@ic.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 5 weekly directories: week1, week2, week3, week4, week7

The Week2 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK2...

Found the following directories: code, data, sandbox, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## **Week 2 Repository**

This repository contains all coursework materials from week 2 of practical work in the CMEE course.

Specifically, this includes the [**Biological Computing in Python I**](https://mhasoba.github.io/TheMulQuaBio/notebooks/05-Python_I.html#) chapter in the Computing module of the  [**The Multilingual Quantitative Biologist**](https://mhasoba.github.io/TheMulQuaBio/intro.html) online book.


### **Languages**

Python 3.8.10


### **Dependencies** 

No special packages are required to run this project.


### **Installation**

If you would like to run the scripts in this project, you should clone this repository.


### **Usage**

[**lc1.py**](code/lc1.py)

This script contains two exercises on practicing list comprehensions and loops. It should be run altogether and print the latin names, common names, and mean body masses for each bird species two times.

[**lc2.py**](code/lc2.py)

This script contains three more exercises on practicing list comprehensions and loops. It should be run altogether and print the following lists two times:
- a list of month/rainfall tuples where the amount of rain was greater than 100mm
- a list of just month names where the amount of rain was less than 50mm

[**dictionary.py**](code/dictionary.py)

This script makes a dictionary from tuples. It should be run altogether and return a dictionary which maps order names to sets of taxa.

[**tuple.py**](code/tuple.py)

Thsi script demonstrates how to separate a tuple of tuples into separate lines. It should be run altogether and print each species' latin name, common name, and mass on separate lines.

[**cfexercises1.py**](code/cfexercises.py)

This script contains some functions exemplifying the use of conditionals. It should be run altogether, writing the six functions and printing the results of the test argument for each function.

[**align_seqs.py**](code/align_seqs.py)

This script aligns two DNA sequences such that they are as similar as possible. It should be run altogether, taking an input from the [data](data) directory and outputting a text file with the best alignment and corresponding score into the [results](results) directory.


[**basic_csv.py**](code/basic_csv.py)


## TO DO: FINISH ADDING ALL THE REST OF CODE STUFF


### **Author name and contact**

Lizzie Bru
eab21@ic.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 21 code files: cfexercises1.py, align_seqs.py, tuple.py, MyExampleScript.py, scope.py, loops.py, cfexercises2.py, boilerplate.py, debugme.py, test_control_flow.py, basic_csv.py, basic_io3.py, oaks.py, dictionary.py, sysargv.py, using_name.py, lc2.py, basic_io1.py, control_flow.py, lc1.py, basic_io2.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file cfexercises1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of conditionals"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

import sys

def foo_1(x):
    """Raise input to the power of 0.5."""
    return x ** 0.5

def foo_2(x, y):
    """Needs two inputs.
    Print the one which has a greater numerical value."""
    if x > y:
        return x
    return y

def foo_3(x, y, z):
    """Rearrange the three inputs provided into ascending order if they are not already."""
    if x > y:
        tmp = y
        y = x
        x = tmp
    if y > z:
        tmp = z
        z = y
        y = tmp
    return [x, y, z]

def foo_4(x):
    """Return the factorial of the input"""
    result = 1
    for i in range(1, x + 1):
        result = result * i
    return result

def foo_5(x):
    """Calculate the factorial of input"""
    if x == 1:
        return 1
    return x * foo_5(x - 1)
     
def foo_6(x):
    """Calculate the factorial of input in a different way"""
    facto = 1
    while x >= 1:
        facto = facto * x
        x = x - 1
    return facto


## test arguments to show that these functions work:

def main(argv):
    print(foo_1(14))
    print(foo_2(5,10))
    print(foo_3(89,44,61))
    print(foo_4(124))
    print(foo_5(34))
    print(foo_6(88))
    return 0


if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing cfexercises1.py...

cfexercises1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.5

Output (only first 500 characters): 


**********************************************************************
3.7416573867739413
10
[44, 61, 89]
1506141741511140879795014161993280686076322918971939407100785852066825250652908790935063463115967385069171243567440461925041295354731044782551067660468376444194611004520057054167040000000000000000000000000000
295232799039604140847618609643520000000
185482642257398439114796845645546284380220968949399346684421580986889562184028199319100141244804501828416633516851200000000000000000000

**********************************************************************

Code ran without errors

Time consumed = 0.05602s

======================================================================
Inspecting script file align_seqs.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script aligns two DNA sequences such that they are as similar as possible"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

# Two example sequences to match
#seq2 = "ATCGCCGGATTACGGG"
#seq1 = "CAATTCGGAT"

# import input data

import csv

with open("../data/align_seqs_data.csv") as dna_data:
    csvreader = csv.reader(dna_data)
    header = next(csvreader)
    print(header)
    rows = [r for r in csvreader]
    print(rows)

## assign seq1 and seq2 to the two example sequences to match

# make empty list
empty_list = []

# open the csv file and loop through the rows, appending them to a list
with open("../data/align_seqs_data.csv") as dna_data:
    dna_data_csvreader = csv.reader(dna_data)
    for row in dna_data_csvreader:
        empty_list.append(row)

# assign seq2 and seq1 to each line of the list
seq2 = str(empty_list[0])
seq1 = str(empty_list[1])

# Assign the longer sequence s1, and the shorter to s2
# l1 is length of the longest, l2 that of the shortest

l1 = len(seq1)
l2 = len(seq2)
if l1 >= l2:
    s1 = seq1
    s2 = seq2
else:
    s1 = seq2
    s2 = seq1
    l1, l2 = l2, l1 # swap the two lengths

# A function that computes a score by returning the number of matches starting
# from arbitrary startpoint (chosen by user)
def calculate_score(s1, s2, l1, l2, startpoint):
    matched = "" # to hold string displaying alignements
    score = 0
    for i in range(l2):
        if (i + startpoint) < l1:
            if s1[i + startpoint] == s2[i]: # if the bases match
                matched = matched + "*"
                score = score + 1
            else:
                matched = matched + "-"

    # some formatted output
    print("." * startpoint + matched)           
    print("." * startpoint + s2)
    print(s1)
    print(score) 
    print(" ")

    return score

# Test the function with some example starting points:
# calculate_score(s1, s2, l1, l2, 0)
# calculate_score(s1, s2, l1, l2, 1)
# calculate_score(s1, s2, l1, l2, 5)

# now try to find the best match (highest score) for the two sequences
my_best_align = None
my_best_score = -1

for i in range(l1): # Note that you just take the last alignment with the highest score
    z = calculate_score(s1, s2, l1, l2, i)
    if z > my_best_score:
        my_best_align = "." * i + s2 # think about what this is doing!
        my_best_score = z 
print(my_best_align)
print(s1)
print("Best score:", my_best_score)

## Save the best alignemt and its corresponding score in a single text file to results directory:

# import module
import os

# make empty code file and write data to it (the 'w' allows this)
# use a with loop for this (do this whenever you're interacting with files in this way!) so that it automatically closes the file if it encounters any errors along the way

with open("../results/dna_align_output.txt", "w") as dna_output:
    # write outputs to it
    dna_output.write("Best alignment:" + "\n" + my_best_align +"\n" + str(s1) + "\n" + "Score: " + str(my_best_score))


**********************************************************************

Testing align_seqs.py...

align_seqs.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
['ATCGCCGGATTACGGG']
[['CAATTCGGAT']]
**-----*****--
['CAATTCGGAT']
['ATCGCCGGATTACGGG']
7
 
.--------*--*--
.['CAATTCGGAT']
['ATCGCCGGATTACGGG']
2
 
..--*-----------
..['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
...----------*---
...['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
....--*-----------
....['CAATTCGGAT']
['ATCGCCGGATTACGGG']
1
 
.....--*---*-------
.....['CAATTCGGAT']
['ATCGCCGGATTACGGG']
2
 
......----***--*--**
......['CAATTCGGAT']
['ATCGCCGGATTACGGG']
6
 
.......---*-*-***---
.......['CAATTC
**********************************************************************

Code ran without errors

Time consumed = 0.02426s

======================================================================
Inspecting script file tuple.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script demonstrating how to separate a tuple of tuples into separate lines"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

from typing import Pattern

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
        )

# Birds is a tuple of tuples of length three: latin name, common name, mass.
# write a (short) script to print these on a separate line or output block by species 
# 

for x in birds:
    print('Latin name: ', x[0])
    print('Common name: ', x[1])
    print('Mass: ', x[2])
**********************************************************************

Testing tuple.py...

tuple.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************
Latin name:  Passerculus sandwichensis
Common name:  Savannah sparrow
Mass:  18.7
Latin name:  Delichon urbica
Common name:  House martin
Mass:  19
Latin name:  Junco phaeonotus
Common name:  Yellow-eyed junco
Mass:  19.5
Latin name:  Junco hyemalis
Common name:  Dark-eyed junco
Mass:  19.6
Latin name:  Tachycineata bicolor
Common name:  Tree swallow
Mass:  20.2

**********************************************************************

Code ran without errors

Time consumed = 0.02847s

======================================================================
Inspecting script file MyExampleScript.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Example of a Python script"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


def foo(x):
    x *= x # same as x = x*x
    print(x)

foo(2)
**********************************************************************

Testing MyExampleScript.py...

MyExampleScript.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 98.5

Output (only first 500 characters): 


**********************************************************************
4

**********************************************************************

Code ran without errors

Time consumed = 0.02150s

======================================================================
Inspecting script file scope.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate variable scope in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

# example of local variables (= only accessible inside their function)
i = 1
x = 0
for i in range(10):
    x += 1
print(x)
print(i)


# now encapsulating this loop into a function...
i = 1
x = 0
def a_function(y):
    x = 0
    for i in range(y):
        x += 1
    return x
x = a_function(10)
print(x)
print(i)
## --> both x and i are localised to the function
## --> x was updated to the main workspace bc it was explicitly returned from the function
## --> i remained unchanged outside the function bc it was not returned


####################################################################################

# GLOBAL VARIABLES

# example:

_a_global = 10 # a global variable

if _a_global >= 5:
    _b_global = _a_global + 5 # also a global variable
    
print("Before calling a_function, outside the function, the value of _a_global is", _a_global)
print("Before calling a_function, outside the function, the value of _b_global is", _b_global)

def a_function():
    _a_global = 4 # a local variable
    
    if _a_global >= 4:
        _b_global = _a_global + 5 # also a local variable
    
    _a_local = 3
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value of _b_global is", _b_global)
    print("Inside the function, the value of _a_local is", _a_local)
    
a_function()

print("After calling a_function, outside the function, the value of _a_global is (still)", _a_global)
print("After calling a_function, outside the function, the value of _b_global is (still)", _b_global)

print("After calling a_function, outside the function, the value of _a_local is ", _a_local)

## --> what happens in the function stays in the function (i.e. overwriting _a_global)
## --> _a_local doesn't persist outside the function (hence the NameError at the end)


# if you assign a variable outside the function it'll still be available inside the function even if you don't assign it inside that function:

_a_global = 10

def a_function():
    _a_local = 4
    
    print("Inside the function, the value _a_local is", _a_local)
    print("Inside the function, the value of _a_global is", _a_global)
    
a_function()

print("Outside the function, the value of _a_global is", _a_global)


# to modify/assign a global variable from inside a function, you can use the global keyword:

_a_global = 10

print("Before calling a_function, outside the function, the value of _a_global is", _a_global)

def a_function():
    global _a_global
    _a_global = 5
    _a_local = 4
    
    print("Inside the function, the value of _a_global is", _a_global)
    print("Inside the function, the value _a_local is", _a_local)
    
a_function()

print("After calling a_function, outside the function, the value of _a_global now is", _a_global)


# the global keyword also works from inside nested functions:

def a_function():
    _a_global = 10

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)
    
a_function()

print("The value of a_global in main workspace / namespace now is", _a_global)

## --> i.e. using a global keyword inside the inner function _a_function2 resulted in changing the value of _a_global in the main workspace to 20, but within the scope of the _a_function its value remained 10


# compare with this:

_a_global = 10

def a_function():

    def _a_function2():
        global _a_global
        _a_global = 20
    
    print("Before calling a_function2, value of _a_global is", _a_global)

    _a_function2()
    
    print("After calling a_function2, value of _a_global is", _a_global)

a_function()

print("The value of a_global in main workspace / namespace is", _a_global)

## --> bc _a_global was defined in advance, when _a_function was run:
## - this value was inherited within _a_function from the main workspace
## - it was then given a global designation in the inner function _a_function2
## - then in the inner function _a_function2 when it was changed to a different value it was modified everywhere
**********************************************************************

Testing scope.py...

scope.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
10
9
10
1
Before calling a_function, outside the function, the value of _a_global is 10
Before calling a_function, outside the function, the value of _b_global is 15
Inside the function, the value of _a_global is 4
Inside the function, the value of _b_global is 9
Inside the function, the value of _a_local is 3
After calling a_function, outside the function, the value of _a_global is (still) 10
After calling a_function, outside the function, the value of _b_global is (still) 15

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "scope.py", line 62, in <module>
    print("After calling a_function, outside the function, the value of _a_local is ", _a_local)
NameError: name '_a_local' is not defined

======================================================================
Inspecting script file loops.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some examples of loops"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


# FOR loops in Python
for i in range(5):
    print(i)

my_list = [0, 2, "geronimo!", 3.0, True, False]
for k in my_list:
    print(k)

total = 0
summands = [0, 1, 11, 111, 1111]
for s in summands:
    total = total + s
    print(total)

# WHILE loops  in Python
z = 0
while z < 100:
    z = z + 1
    print(z)

b = True
while b:
    print("GERONIMO! infinite loop! ctrl+c to stop!")
# ctrl + c to stop!
**********************************************************************

Testing loops.py...

loops.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
0
1
2
3
4
0
2
geronimo!
3.0
True
False
0
1
12
123
1234
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c to stop!
GERONIMO! infinite loop! ctrl+c
**********************************************************************

Code ran without errors

Time consumed = 10.40478s

======================================================================
Inspecting script file cfexercises2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Examples of loops and conditionals combined"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


for j in range(12):
    if j % 3 == 0:
        print('hello')

for j in range(15):
     if j % 5 == 3:
        print('hello')
     elif j % 4 == 3:
        print('hello')

z = 0
while z != 15:
    print('hello')
    z = z + 3

z = 12
while z < 100:
    if z == 31:
        for k in range(7):
            print('hello')
    elif z == 18:
        print('hello')
    z = z + 1
**********************************************************************

Testing cfexercises2.py...

cfexercises2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello
hello

**********************************************************************

Code ran without errors

Time consumed = 0.04913s

======================================================================
Inspecting script file boilerplate.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Boilerplate for Python programs""" # doc strings - interprets it as being documentation for the code - so if you type help for this function this is what you get
# --> makes it easy for you to document what your program is

__appname__ = '[application name here]'
__author__ = 'Your Name (your@email.address)'
__version__ = '0.0.1'
__license__ = "License for this code/program"

## imports ##
import sys # module to interface our program with the operating system (comes with the python operating system)
# this one has lots of powerful commands that allow you to use python in different platforms

## constants ##
# --> double hashes are useful to section things out nicely
# no constants here bc it's a boilerplate

## functions ##
def main(argv):
    """ Main entry point of the program """
    print('This is a boilerplate') # NOTE: indented using two tabs or 4 spaces
    return 0 #= just being explicit that this was a successful run (0 = code for successful run)
# this is all this program does: prints 'This is a boilerplate'

if __name__ == "__main__": # if this script is being run directly: capture the status, store it, then exit after passing it through the above function, then exit
    """Makes sure the "main" function is called from command line"""  
    print(__name__)
    status = main(sys.argv)
    sys.exit(status) # well-defined way of exiting: means it'll include the output of this function too
**********************************************************************

Testing boilerplate.py...

boilerplate.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 94.5

Output (only first 500 characters): 


**********************************************************************
__main__
This is a boilerplate

**********************************************************************

Code ran without errors

Time consumed = 0.03566s

======================================================================
Inspecting script file debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate debugging in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

def buggyfunc(x):
    y = x
    for i in range(x):
        try:
            y = y - 1
            z = x / y
        except ZeroDivisionError:
            print(f"The result of dividing a number by zero is undefined")
        except:
            print(f"This didn't work; x = {x}; y = {y}")
        else:
            print(f"OK; x = {x}; y = {y}, z = {z};")
    return z

buggyfunc(20)

**********************************************************************

Testing debugme.py...

debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 94.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
  File "debugme.py", line 13
    print(f"The result of dividing a number by zero is undefined")
                                                                ^
SyntaxError: invalid syntax

======================================================================
Inspecting script file test_control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""

__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'
__version__ = '0.0.1'

import sys
import doctest # Import the doctest module

def even_or_odd(x=0):
    """Find whether a number x is even or odd.
      
    >>> even_or_odd(10)
    '10 is Even!'
    
    >>> even_or_odd(5)
    '5 is Odd!'
    
    whenever a float is provided, then the closest integer is used:    
    >>> even_or_odd(3.2)
    '3 is Odd!'
    
    in case of negative numbers, the positive is taken:    
    >>> even_or_odd(-2)
    '-2 is Even!'
    
    """
    #Define function to be tested
    if x % 2 == 0:
        return "%d is Even!" % x
    return "%d is Odd!" % x

def main(argv): 
    print(even_or_odd(22))
    print(even_or_odd(33))
    return 0

#if (__name__ == "__main__"):
    #status = main(sys.argv)
    
doctest.testmod()   # To run with embedded tests

**********************************************************************

Testing test_control_flow.py...

test_control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.06033s

======================================================================
Inspecting script file basic_csv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate how to handle csv's in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

import csv

# Read a file containing:
# 'Species','Infraorder','Family','Distribution','Body mass male (Kg)'
with open('../data/testcsv.csv','r') as f:

    csvread = csv.reader(f)
    temp = []
    for row in csvread:
        temp.append(tuple(row))
        print(row)
        print("The species is", row[0])

# write a file containing only species name and Body mass
with open('../data/testcsv.csv','r') as f:
    with open('../data/bodymass.csv','w') as g:

        csvread = csv.reader(f)
        csvwrite = csv.writer(g)
        for row in csvread:
            print(row)
            csvwrite.writerow([row[0], row[4]])
**********************************************************************

Testing basic_csv.py...

basic_csv.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
['Species', 'Infraorder', 'Family', 'Distribution', 'Body mass male (Kg)']
The species is Species
['Daubentonia_madagascariensis', 'Chiromyiformes ', 'Daubentoniidae', 'Madagascar', '2.7']
The species is Daubentonia_madagascariensis
['Allocebus_trichotis', 'Lemuriformes', 'Cheirogaleidae', 'Madagascar', '0.1']
The species is Allocebus_trichotis
['Avahi_laniger', 'Lemuriformes', 'Indridae', 'America', '1.03']
The species is Avahi_laniger
['Avahi_occidentalis', 'Lemuriformes', 'Indridae', 'Madagasc
**********************************************************************

Code ran without errors

Time consumed = 0.02499s

======================================================================
Inspecting script file basic_io3.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate how to store files in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


#############################
# STORING OBJECTS
#############################
# To save an object (even complex) for later use
my_dictionary = {"a key": 10, "another key": 11}

import pickle

f = open('../sandbox/testp.p','wb') ## note the b: accept binary files
pickle.dump(my_dictionary, f)
f.close()

## Load the data again
f = open('../sandbox/testp.p','rb')
another_dictionary = pickle.load(f)
f.close()

print(another_dictionary)

**********************************************************************

Testing basic_io3.py...

basic_io3.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.5

Output (only first 500 characters): 


**********************************************************************
{'another key': 11, 'a key': 10}

**********************************************************************

Code ran without errors

Time consumed = 0.02556s

======================================================================
Inspecting script file oaks.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Worked example of using loops and list comprehensions"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


## Finds just those taxa that are oak trees from a list of species

taxa = [ 'Quercus robur',
         'Fraxinus excelsior',
         'Pinus sylvestris',
         'Quercus cerris',
         'Quercus petraea',
       ]

def is_an_oak(name):
    return name.lower().startswith('quercus ')

##Using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species)
print(oaks_loops)

##Using list comprehensions   
oaks_lc = set([species for species in taxa if is_an_oak(species)]) #build an unordered collection of species names containing instances where the species category in 'taxa' is passable through the 'is_an_oak' function (i.e. is an oak!)
print(oaks_lc)

##Get names in UPPER CASE using for loops
oaks_loops = set()
for species in taxa:
    if is_an_oak(species):
        oaks_loops.add(species.upper())
print(oaks_loops)

##Get names in UPPER CASE using list comprehensions
oaks_lc = set([species.upper() for species in taxa if is_an_oak(species)])
print(oaks_lc)
**********************************************************************

Testing oaks.py...

oaks.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
{'Quercus robur', 'Quercus cerris', 'Quercus petraea'}
{'Quercus robur', 'Quercus cerris', 'Quercus petraea'}
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}
{'QUERCUS PETRAEA', 'QUERCUS CERRIS', 'QUERCUS ROBUR'}

**********************************************************************

Code ran without errors

Time consumed = 0.02179s

======================================================================
Inspecting script file dictionary.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Making a dictionary derived from tuples"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

taxa = [ ('Myotis lucifugus','Chiroptera'),
         ('Gerbillus henleyi','Rodentia',),
         ('Peromyscus crinitus', 'Rodentia'),
         ('Mus domesticus', 'Rodentia'),
         ('Cleithrionomys rutilus', 'Rodentia'),
         ('Microgale dobsoni', 'Afrosoricida'),
         ('Microgale talazaci', 'Afrosoricida'),
         ('Lyacon pictus', 'Carnivora'),
         ('Arctocephalus gazella', 'Carnivora'),
         ('Canis lupus', 'Carnivora'),
        ]

# Exercise: write a short python script to populate a dictionary called taxa_dic 
# derived from  taxa so that it maps order names to sets of taxa

# make empty dictionary
taxa_dic = {}

# use .setdefault() to set order_names as the first element of the dictionary and append corresponding taxon names to them
for taxon, order_name in taxa:
        taxa_dic.setdefault(order_name, []).append(taxon)

print(taxa_dic)
**********************************************************************

Testing dictionary.py...

dictionary.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 93.0

Output (only first 500 characters): 


**********************************************************************
{'Rodentia': ['Gerbillus henleyi', 'Peromyscus crinitus', 'Mus domesticus', 'Cleithrionomys rutilus'], 'Carnivora': ['Lyacon pictus', 'Arctocephalus gazella', 'Canis lupus'], 'Afrosoricida': ['Microgale dobsoni', 'Microgale talazaci'], 'Chiroptera': ['Myotis lucifugus']}

**********************************************************************

Code ran without errors

Time consumed = 0.02258s

======================================================================
Inspecting script file sysargv.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

import sys
print("This is the name of the script: ", sys.argv[0])
print("Number of arguments: ", len(sys.argv))
print("The arguments are: ", str(sys.argv))

**********************************************************************

Testing sysargv.py...

sysargv.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 91.0

Output (only first 500 characters): 


**********************************************************************
This is the name of the script:  sysargv.py
Number of arguments:  1
The arguments are:  ['sysargv.py']

**********************************************************************

Code ran without errors

Time consumed = 0.02324s

======================================================================
Inspecting script file using_name.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3
# Filename: using_name.py

if __name__ == '__main__':
    print('This program is being run by itself')
else:
    print('I am being imported from another module')

print("This module's name is: " + __name__)
**********************************************************************

Testing using_name.py...

using_name.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
2 pts deducted

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************
This program is being run by itself
This module's name is: __main__

**********************************************************************

Code ran without errors

Time consumed = 0.02283s

======================================================================
Inspecting script file lc2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Exercises on list comprehensions and loops"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

# Average UK Rainfall (mm) for 1910 by month
# http://www.metoffice.gov.uk/climate/uk/datasets
rainfall = (('JAN',111.4),
            ('FEB',126.1),
            ('MAR', 49.9),
            ('APR', 95.3),
            ('MAY', 71.8),
            ('JUN', 70.2),
            ('JUL', 97.1),
            ('AUG',140.2),
            ('SEP', 27.0),
            ('OCT', 89.4),
            ('NOV',128.4),
            ('DEC',142.2),
           )

# (1) Use a list comprehension to create a list of month,rainfall tuples where
# the amount of rain was greater than 100 mm.
 
lots_of_rain = [x for x in rainfall if x[1] > 100] 
print(lots_of_rain)

# (2) Use a list comprehension to create a list of just month names where the
# amount of rain was less than 50 mm. 

not_much_rain = [x[0] for x in rainfall if x[1] < 50]
print(not_much_rain)

# (3) Now do (1) and (2) using conventional loops

lots_of_rain2 = []

for x in rainfall:
    if x[1] > 100:
        lots_of_rain2.append(x)
print(lots_of_rain2)


not_much_rain2 = []

for x in rainfall:
    if x[1] < 50:
        not_much_rain2.append(x[0])
print(not_much_rain2)
**********************************************************************

Testing lc2.py...

lc2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']
[('JAN', 111.4), ('FEB', 126.1), ('AUG', 140.2), ('NOV', 128.4), ('DEC', 142.2)]
['MAR', 'SEP']

**********************************************************************

Code ran without errors

Time consumed = 0.02242s

======================================================================
Inspecting script file basic_io1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate how to input files in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


#############################
# FILE INPUT
#############################
# Open a file for reading
with open('../sandbox/test.txt', 'r') as f:
    # use "implicit" for loop:
    # if the object is a file, python will cycle over lines
    for line in f:
        print(line)

# Once you drop out of the with, the file is automatically closed

# Same example, skip blank lines
with open('../sandbox/test.txt', 'r') as f:
    for line in f:
        if len(line.strip()) > 0:
            print(line)


**********************************************************************

Testing basic_io1.py...

basic_io1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 89.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "basic_io1.py", line 11, in <module>
    with open('../sandbox/test.txt', 'r') as f:
FileNotFoundError: [Errno 2] No such file or directory: '../sandbox/test.txt'

======================================================================
Inspecting script file control_flow.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Some functions exemplifying the use of control statements"""
#docstrings are considered part of the running code (normal comments are
#stripped). Hence, you can access your docstrings at run time.
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'
__version__ = '0.0.1'

import sys

def even_or_odd(x=0): # if not specified, x should take value 0.

    """Find whether a number x is even or odd."""
    if x % 2 == 0: #The conditional if
        return "%d is Even!" % x
    return "%d is Odd!" % x

def largest_divisor_five(x=120):
    """Find which is the largest divisor of x among 2,3,4,5."""
    largest = 0
    if x % 5 == 0:
        largest = 5
    elif x % 4 == 0: #means "else, if"
        largest = 4
    elif x % 3 == 0:
        largest = 3
    elif x % 2 == 0:
        largest = 2
    else: # When all other (if, elif) conditions are not met
        return "No divisor found for %d!" % x # Each function can return a value or a variable.
    return "The largest divisor of %d is %d" % (x, largest)

def is_prime(x=70):
    """Find whether an integer is prime."""
    for i in range(2, x): #  "range" returns a sequence of integers
        if x % i == 0:
          print("%d is not a prime: %d is a divisor" % (x, i)) 
          return False
    print("%d is a prime!" % x)
    return True 

def find_all_primes(x=22):
    """Find all the primes up to x"""
    allprimes = []
    for i in range(2, x + 1):
      if is_prime(i):
        allprimes.append(i)
    print("There are %d primes between 2 and %d" % (len(allprimes), x))
    return allprimes
      
def main(argv):
    print(even_or_odd(22))
    print(even_or_odd(33))
    print(largest_divisor_five(120))
    print(largest_divisor_five(121))
    print(is_prime(60))
    print(is_prime(59))
    print(find_all_primes(100))
    return 0

if (__name__ == "__main__"):
    status = main(sys.argv)
    sys.exit(status)
**********************************************************************

Testing control_flow.py...

control_flow.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************
22 is Even!
33 is Odd!
The largest divisor of 120 is 5
No divisor found for 121!
60 is not a prime: 2 is a divisor
False
59 is a prime!
True
2 is a prime!
3 is a prime!
4 is not a prime: 2 is a divisor
5 is a prime!
6 is not a prime: 2 is a divisor
7 is a prime!
8 is not a prime: 2 is a divisor
9 is not a prime: 3 is a divisor
10 is not a prime: 2 is a divisor
11 is a prime!
12 is not a prime: 2 is a divisor
13 is a prime!
14 is not a prime: 2 is a divisor
15 is not a prime: 3 is a divisor
16 is 
**********************************************************************

Code ran without errors

Time consumed = 0.02208s

======================================================================
Inspecting script file lc1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Exercises on list comprehensions and loops"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

birds = ( ('Passerculus sandwichensis','Savannah sparrow',18.7),
          ('Delichon urbica','House martin',19),
          ('Junco phaeonotus','Yellow-eyed junco',19.5),
          ('Junco hyemalis','Dark-eyed junco',19.6),
          ('Tachycineata bicolor','Tree swallow',20.2),
         )

#(1) Write three separate list comprehensions that create three different
# lists containing the latin names, common names and mean body masses for
# each species in birds, respectively

latin_names = [x[0] for x in birds] # x here is referring to each row of tuples individually (same applies for all list comprehensions/loops in these practicals)
print(latin_names)

common_names = [x[1] for x in birds]
print(common_names)

mean_body_masses = [x[2] for x in birds]
print(mean_body_masses)

# (2) Now do the same using conventional loops

latin_names2 = []

for first_tuple in birds:
    latin_names2.append(first_tuple[0])
print(latin_names2)


common_names2 = []

for second_tuple in birds:
    common_names2.append(second_tuple[1])
print(common_names2)


mean_body_masses2 = []

for third_tuple in birds:
    mean_body_masses2.append(third_tuple[2])
print(mean_body_masses2)
**********************************************************************

Testing lc1.py...

lc1.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]
['Passerculus sandwichensis', 'Delichon urbica', 'Junco phaeonotus', 'Junco hyemalis', 'Tachycineata bicolor']
['Savannah sparrow', 'House martin', 'Yellow-eyed junco', 'Dark-eyed junco', 'Tree swallow']
[18.7, 19, 19.5, 19.6, 20.2]

**********************************************************************

Code ran without errors

Time consumed = 0.02240s

======================================================================
Inspecting script file basic_io2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Script to demonstrate how to output files in Python"""
__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'


#############################
# FILE OUTPUT
#############################
# Save the elements of a list to a file
list_to_save = range(100)

f = open('../sandbox/testout.txt','w')
for i in list_to_save:
    f.write(str(i) + '\n') ## Add a new line at the end

f.close()
**********************************************************************

Testing basic_io2.py...

basic_io2.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 88.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.02229s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 88.5

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!