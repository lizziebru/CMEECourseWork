getwd()
setwd("~/Documents/CMEECourseWork/week3/code")
setwd("~/Documents/CMEECourseWork/week3/code")
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
View(MyData)
MyData <- as.matrix(read.csv("../data/PoundHillData.csv",header = FALSE))
class(MyData)
############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
############# Inspect the dataset ###############
head(MyData)
dim(MyData)
?dim()
?str()
? fix()
fix(MyData) # invokes edit on the object and assigns the new version of the object into the workspace
?edit
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
fix(MyMetaData)
############# Transpose ###############
# To get those species into columns and treatments into rows
MyData <- t(MyData)
head(MyData)
dim(MyData)
############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0
TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important! (prevents R from converting all the strings to factors)
colnames(TempData) <- MyData[1,] # assign column names from original data
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
?melt # this
############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package
require("reshape2")
??reshape2
############# Convert from wide to long format  ###############
require(stats)
require(reshape2) # load the reshape2 package
install.packages("reshape2")
library(reshape2)
?melt # this
MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])
str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)
a <- T
a
MyMetaData
MyData
class(MyData)
View(MyData)
View(MyMetaData)
# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")
View(MyMetaData)
View(MyData)
View(MyWrangledData)
# replace all the blanks with zeros (blanks = true absences (the spp wasn't present in that quadrat)):
MyData[MyData ==""] <- 0
require(tidyverse)
install.packages("tidyverse")
require(tidyverse) # useful for data exploration
# convert the dataframe to a 'tibble' (= equivalent o R's traditional data.frame (i.e. tibble = a modified data frame))
tibble::as_tibble(MyWrangledData)
dplyr::glimpse(MyWrangledData) #like str(), but nicer!
?dplyr::glimpse
# can also use this:
utils::View(MyWrangledData)
# can subset the data:
dplyr::filter(MyWrangledData, Count>100) #like subset(), but nicer!
#install the sqlite package
install.packages('sqldf')
# To load the packages
library(sqldf)
# The command below opens a connection to the database.
#If the database does not yet exist, one is created in the working directory of R.
db <- dbConnect(SQLite(), dbname='Test.sqlite')
# Now let's enter some data to the table
# Using the db connection to our database, the data are entered using SQL queries
# The next command just create the table
dbSendQuery(conn = db,
"CREATE TABLE Consumer
(OriginalID TEXT,
ConKingdom TEXT,
ConPhylum TEXT,
ConSpecies TEXT)")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (1, 'Animalia', 'Arthropoda', 'Chaoborus trivittatus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (2, 'Animalia', 'Arthropoda', 'Chaoborus americanus')")
dbSendQuery(conn = db,
"INSERT INTO Consumer
VALUES (3, 'Animalia', 'Chordata', 'Stizostedion vitreum')")
dbGetQuery(db, "SELECT * FROM Consumer")
dbGetQuery(db, "SELECT * FROM Consumer WHERE ConPhylum='Chordata'")
Resource <- read.csv("../Data/Resource.csv")  # Read csv files into R
# Import data frames into database
dbWriteTable(conn = db, name = "Resource", value = Resource, row.names = FALSE)
MyDF <- read.csv("../data/EcolArchives-E089-51-D1.csv")
dim(MyDF) #check the size of the data frame you loaded
MyDF
MyDF
View(MyDF)
# have a look at the data:
head(MyDF)
View(MyDF)
# can also do data inspection/exploration using dplyr
require(tidyverse)
dplyr::glimpse(MyDF)
# change the type of certain columns to factor so that we can use them as grouping variables:
MyDF$Type.of.feeding.interaction <- as.factor(MyDF$Type.of.feeding.interaction)
MyDF$Location <- as.factor(MyDF$Location)
str(MyDF)
plot(MyDF$Predator.mass, MyDF$Prey.mass)
# try using logs instead:
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass))
# using a base-10 log transform:
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass))
# can tweak lots of aspects of the graph:
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20) # Change marker
plot(log10(MyDF$Predator.mass),log10(MyDF$Prey.mass),pch=20, xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
# histogram of predator body masses:
hist(MyDF$Predator.mass)
hist(log10(MyDF$Predator.mass),xlab="log10(Predator Mass (g))",ylab="Count",
col = "lightblue", border = "pink") # Change bar and borders colors
par(mfcol=c(2,1)) #initialize multi-paneled plot
par(mfg = c(1,1)) # specify which sub-plot to use first
hist(log10(MyDF$Predator.mass),
xlab = "log10(Predator Mass (g))", ylab = "Count", col = "lightblue", border = "pink",
main = 'Predator') # Add title
par(mfg = c(2,1)) # Second sub-plot
hist(log10(MyDF$Prey.mass), xlab="log10(Prey Mass (g))",ylab="Count", col = "lightgreen", border = "pink", main = 'prey')
hist(log10(MyDF$Predator.mass), # Predator histogram
xlab="log10(Body Mass (g))", ylab="Count",
col = rgb(1, 0, 0, 0.5), # Note 'rgb', fourth value is transparency
main = "Predator-prey size Overlap")
hist(log10(MyDF$Prey.mass), col = rgb(0, 0, 1, 0.5), add = T) # Plot prey
legend('topleft',c('Predators','Prey'),   # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5))) # Define legend colors
boxplot(log10(MyDF$Predator.mass), xlab = "Location", ylab = "log10(Predator Mass)", main = "Predator mass")
# to see how many locations the data are from:
boxplot(log(MyDF$Predator.mass) ~ MyDF$Location, # Why the tilde?
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass by location")
# boxplot by feeding interaction type:
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass by feeding interaction type")
# boxplot by feeding interaction type:
boxplot(log(MyDF$Predator.mass) ~ MyDF$Type.of.feeding.interaction,
xlab = "Location", ylab = "Predator Mass",
main = "Predator mass by feeding interaction type")
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
par(fig=c(0,0.8,0.4,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.55,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
par(fig=c(0,0.8,0.4,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.55,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
par(fig=c(0,0.8,0,0.8)) # specify figure size as proportion
plot(log(MyDF$Predator.mass),log(MyDF$Prey.mass), xlab = "Predator Mass (g)", ylab = "Prey Mass (g)") # Add labels
par(fig=c(0,0.8,0.4,1), new=TRUE)
boxplot(log(MyDF$Predator.mass), horizontal=TRUE, axes=FALSE)
par(fig=c(0.55,1,0,0.8),new=TRUE)
boxplot(log(MyDF$Prey.mass), axes=FALSE)
mtext("Fancy Predator-prey scatterplot", side=3, outer=TRUE, line=-3)
pdf("../results/Pred_Prey_Overlay.pdf", # Open blank pdf page using a relative path
11.7, 8.3) # These numbers are page dimensions in inches
hist(log(MyDF$Predator.mass), # Plot predator histogram (note 'rgb')
xlab="Body Mass (g)", ylab="Count", col = rgb(1, 0, 0, 0.5), main = "Predator-Prey Size Overlap")
hist(log(MyDF$Prey.mass), # Plot prey weights
col = rgb(0, 0, 1, 0.5),
add = T)  # Add to same plot = TRUE
legend('topleft',c('Predators','Prey'), # Add legend
fill=c(rgb(1, 0, 0, 0.5), rgb(0, 0, 1, 0.5)))
graphics.off(); #you can also use dev.off()
require(ggplot2)
# can make quick plots for exploratory analysis using qplot
#scatterplots:
qplot(Prey.mass, Predator.mass, data = MyDF)
qplot(log(Prey.mass), log(Predator.mass), data = MyDF)
#--> chose red but ggplot used mapping to convert it to a partic shade of red
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = I("red"))
qplot(log(Prey.mass), log(Predator.mass),  data = MyDF, size = I(3)) #no mapping
# for shape:
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape = 3)
#--> gives an error bc ggplot doesn't have continuous mapping
#--> instead:
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, shape= I(3))
# setting transparency: use alpha:
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, colour = Type.of.feeding.interaction, alpha = I(.5))
# need to specify if we want a linear regression:
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth")) + geom_smooth(method = "lm")
# to extend the lines to the full range:
qplot(log(Prey.mass), log(Predator.mass), data = MyDF, geom = c("point", "smooth"),
colour = Type.of.feeding.interaction) + geom_smooth(method = "lm",fullrange = TRUE)
# to see how the ratio between prey and predator mass changes according to the type of interaction:
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF)
# boxplots:
qplot(Type.of.feeding.interaction, log(Prey.mass/Predator.mass), data = MyDF, geom = "boxplot")
# colour the histogram according to interaction type:
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram",
fill = Type.of.feeding.interaction)
# can also define your own bin widths:
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "histogram",
fill = Type.of.feeding.interaction, binwidth = 1)
# can plot the smoothed density of data to make it easier to read:
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density",
fill = Type.of.feeding.interaction)
# you can make the densities transparent so that the overlaps are visible:
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density",
fill = Type.of.feeding.interaction,
alpha = I(0.5))
# ..or can use colour instead lf fill to draw only the edge of the curve:
qplot(log(Prey.mass/Predator.mass), data = MyDF, geom =  "density",
colour = Type.of.feeding.interaction)
# multi-faceted plots:
#--> useful for displaying data belonging to different classes
qplot(log(Prey.mass/Predator.mass), facets = Type.of.feeding.interaction ~., data = MyDF, geom =  "density")
# swap the position of the ~ to get a by-column configuration
qplot(log(Prey.mass/Predator.mass), facets =  .~ Type.of.feeding.interaction, data = MyDF, geom =  "density")
# adding + theme_bw() makes it suitable for black and white printing:
qplot(Prey.mass, Predator.mass, data = MyDF, log="xy",
main = "Relation between predator and prey mass",
xlab = "Prey mass (g)",
ylab = "Predator mass (g)") + theme_bw()
# the geom argument:
# load the data
MyDF <- as.data.frame(read.csv("../data/EcolArchives-E089-51-D1.csv"))
# barplot
qplot(Predator.lifestage, data = MyDF, geom = "bar")
# boxplot
qplot(Predator.lifestage, log(Prey.mass), data = MyDF, geom = "boxplot")
# violin plot
qplot(Predator.lifestage, log(Prey.mass), data = MyDF, geom = "violin")
# density
qplot(log(Predator.mass), data = MyDF, geom = "density")
# histogram
qplot(log(Predator.mass), data = MyDF, geom = "histogram")
# scatterplot
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "point")
# smooth
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "smooth")
qplot(log(Predator.mass), log(Prey.mass), data = MyDF, geom = "smooth", method = "lm")
# to start: need to specify the data and the aesthetics:
p <- ggplot(MyDF, aes(x = log(Predator.mass),
y = log(Prey.mass),
colour = Type.of.feeding.interaction))
p
# can add other elements & plot layers:
p + geom_point()
# can use the + sign to concatenate diff commands:
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction ))
q <- p +
geom_point(size=I(2), shape=I(10)) +
theme_bw() + # make the background white
theme(aspect.ratio=1) # make the plot square
q
# to remove the legend:
q + theme(legend.position = "none") + theme(aspect.ratio=1)
# to remove the legend:
q + theme(legend.position = "none") + theme(aspect.ratio=1)
# can do the same as before but using ggplot instead of qplot:
p <- ggplot(MyDF, aes(x = log(Prey.mass/Predator.mass), fill = Type.of.feeding.interaction )) + geom_density()
p
# to start: need to specify the data and the aesthetics:
p <- ggplot(MyDF,
aes(x = log(Predator.mass),y = log(Prey.mass),colour = Type.of.feeding.interaction))
p
# can add other elements & plot layers:
p + geom_point()
# can use the + sign to concatenate diff commands:
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass), colour = Type.of.feeding.interaction ))
q <- p +
geom_point(size=I(2), shape=I(10)) +
theme_bw() + # make the background white
theme(aspect.ratio=1) # make the plot square
q
# to remove the legend:
q + theme(legend.position = "none") + theme(aspect.ratio=1)
# can do the same as before but using ggplot instead of qplot:
p <- ggplot(MyDF, aes(x = log(Prey.mass/Predator.mass), fill = Type.of.feeding.interaction )) + geom_density()
p
# can free up the axes to allow data-specific axis limits by using the scales = "free" argument
p <- ggplot(MyDF, aes(x = log(Prey.mass/Predator.mass), fill = Type.of.feeding.interaction )) +  geom_density() + facet_wrap( .~ Type.of.feeding.interaction, scales = "free")
p
# can plot size-ratio distributions by location:
p <- ggplot(MyDF, aes(x = log(Prey.mass/Predator.mass))) +  geom_density() + facet_wrap( .~ Location, scales = "free")
p
# a different example:
p <- ggplot(MyDF, aes(x = log(Prey.mass), y = log(Predator.mass))) +  geom_point() + facet_wrap( .~ Location, scales = "free")
p
# a different example:
p <- ggplot(MyDF, aes(x = log(Prey.mass), y = log(Predator.mass))) +  geom_point() + facet_wrap( .~ Location, scales = "free")
p
# can also combine categories:
p <- ggplot(MyDF, aes(x = log(Prey.mass), y = log(Predator.mass))) +  geom_point() + facet_wrap( .~ Location + Type.of.feeding.interaction, scales = "free")
p
# can also change the order of the combination:
p <- ggplot(MyDF, aes(x = log(Prey.mass), y = log(Predator.mass))) +  geom_point() + facet_wrap( .~ Type.of.feeding.interaction + Location, scales = "free")
p
# plotting a matrix
require(reshape2)
GenerateMatrix <- function(N){
M <- matrix(runif(N * N), N, N)
return(M)
}
M <- GenerateMatrix(10)
Melt <- melt(M)
p <- ggplot(Melt, aes(Var1, Var2, fill = value)) + geom_tile() + theme(aspect.ratio = 1)
p
# add a black line dividing cells:
p + geom_tile(colour = "black") + theme(aspect.ratio = 1)
# remove all the rest:
p + theme(legend.position = "none",
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.text.y = element_blank(),
axis.title.y = element_blank())
# explore some colours:
p + scale_fill_continuous(low = "yellow", high = "darkgreen")
p + scale_fill_gradient2()
p + scale_fill_gradientn(colours = grey.colors(10))
p + scale_fill_gradientn(colours = rainbow(10))
p + scale_fill_gradientn(colours = c("red", "white", "blue"))
# example: draw the results of a simulation of Girko's circular law (that the eigenvalues of a matrix size N x N are approximately contained in a circle in the complex plane with radius sqrt(N))
build_ellipse <- function(hradius, vradius){ # function that returns an ellipse
npoints = 250
a <- seq(0, 2 * pi, length = npoints + 1)
x <- hradius * cos(a)
y <- vradius * sin(a)
return(data.frame(x = x, y = y))
}
# save the result as a file in the results directory:
pdf("../results/Girko.pdf",
11.7, 8.3) # (= page dimensions in inches)
install.packages("ggthemes")
library(ggthemes)
p <- ggplot(MyDF, aes(x = log(Predator.mass), y = log(Prey.mass),
colour = Type.of.feeding.interaction )) +
geom_point(size=I(2), shape=I(10)) + theme_bw()
p + geom_rangeframe() + # now fine tune the geom to Tufte's range frame
theme_tufte() # and theme to Tufte's minimal ink theme
a <- read.table("../data/Results.txt", header = TRUE)
# check what the data look like:
head(a)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# use ggplot geom text to annotate a plot:
a <- read.table("../data/Results.txt", header = TRUE)
# check what the data look like:
head(a)
# use ggplot geom text to annotate a plot:
a <- read.table("../data/Results.txt", header = TRUE)
# check what the data look like:
head(a)
a$ymin <- rep(0, dim(a)[1]) # append a column of zeros
# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y1,
size = (0.5)
),
colour = "#E69F00",
alpha = 1/2, show.legend = FALSE)
# Print the second linerange
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y2,
size = (0.5)
),
colour = "#56B4E9",
alpha = 1/2, show.legend = FALSE)
# Print the third linerange:
p <- p + geom_linerange(data = a, aes(
x = x,
ymin = ymin,
ymax = y3,
size = (0.5)
),
colour = "#D55E00",
alpha = 1/2, show.legend = FALSE)
# Annotate the plot with labels:
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))
# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",
breaks = seq(3, 5, by = 0.05)) +
scale_y_continuous("My y axis") +
theme_bw() +
theme(legend.position = "none")
p
# save as pdf:
pdf("../results/MyBars.pdf")
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
rnorm(length(x), mean = 0., sd = 2.5)
# and put them in a dataframe
my_data <- data.frame(x = x, y = y)
# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))
# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
colour = abs(my_lm$residual))
) +
geom_point() +
scale_colour_gradient(low = "black", high = "red") +
theme(legend.position = "none") +
scale_x_continuous(
expression(alpha^2 * pi / beta * sqrt(Theta)))
# add the regression line
p <- p + geom_abline(
intercept = my_lm$coefficients[1][1],
slope = my_lm$coefficients[2][1],
colour = "red")
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
label = "sqrt(alpha) * 2* pi"),
parse = TRUE, size = 6,
colour = "blue")
p
pdf("../results/MyLinReg.pdf")
