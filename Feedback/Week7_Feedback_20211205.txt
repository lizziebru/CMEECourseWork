Starting code feedback for Lizzie, Week7

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 3.37 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: week4, week1, week2, week7, .git, MiniProject, week3, Feedback

Found the following files in parent directory: .gitignore, README.md, Notes.txt

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
*.pdf
*.aux
*.bbl
*.log
*.blg

.idea/
.Rproj.user

**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## **My CMEE Coursework Repository**

This contains all coursework materials from practical work in the Computational Methods in Ecology and Evolution course at Imperial College London Silwood Park, which is guided by the [**The Multilingual Quantitative Biologist**](https://mhasoba.github.io/TheMulQuaBio/intro.html) online book.

### **Languages**

BASH version 5.0.17(1)

TeX 3.14159265 (TeX Live 2019/Debian)

### **Dependencies**

imagemagick

bc

### **Contents** 

[**Week 1**](week1)
- this directory contains coursework materials from week 1 of practical work, covering the following topics:
1. [UNIX and Linux](https://mhasoba.github.io/TheMulQuaBio/notebooks/01-Unix.html#)
2. [Shell scripting](https://mhasoba.github.io/TheMulQuaBio/notebooks/02-ShellScripting.html)
3. [Version control with Git](https://mhasoba.github.io/TheMulQuaBio/notebooks/03-Git.html)
4. [Scientific documents with LaTeX](https://mhasoba.github.io/TheMulQuaBio/notebooks/04-LaTeX.html)

### **Usage**

Instructions for usage of specific files in this repository can be found in the week-specific README files.

### **Author name and contact**

Lizzie Bru
eab21@ic.ac.uk

**********************************************************************

======================================================================
Looking for the weekly directories...

Found 5 weekly directories: week1, week2, week3, week4, week7

The Week7 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK7...

Found the following directories: code, data, sandbox, results

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
## **Week 7 Repository**

This repository contains all coursework materials from week 7 of practical work in the CMEE course.

Specifically, this includes the [**Biological Computing in Python I**](https://mhasoba.github.io/TheMulQuaBio/notebooks/05-Python_I.html), [**Biological Computing in Python II**](https://mhasoba.github.io/TheMulQuaBio/notebooks/06-Python_II.html), [**Introduction to Jupyter**](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-JupyIntro.html), [**Data Analyses with Python and Jupyter**](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-Data-Python.html), and [**Mathematical models with Jupyter**](https://mhasoba.github.io/TheMulQuaBio/notebooks/Appendix-Data-Python.html) chapters in [**The Multilingual Quantitative Biologist**](https://mhasoba.github.io/TheMulQuaBio/intro.html) online book.


### **Languages**

Python 3.8.10

R version 3.6.3 (2020-02-29)

### **Dependencies** 

Python:
- numpy
- scipy
- scipy.integrate
- matplotlib.pylab
- subprocess
- timeit
- doctest
- difflib
- SequenceMatcher


### **Installation**

If you would like to run the scripts in this project, you should clone this repository. 


### **Usage**

[**oaks_debugme.py**](code/oaks_debugme.py)

This script served as a debugging exercise. It is now fixed and should take the input data TestOaksData.csv and write an output of oak names to JustOaksData.csv.


[**LV1.py**](code/LV1.py)

This script illustrates numerical integration and plotting in Python. It should be run in one go and output two figures as PDFs into the results folder. 


[**MyFirstJupyterNb.ipynb**](code/MyFirstJupyterNb.ipynb)

This is an example jupyter notebook with some examples of what you can do in jupyter.


[**numpy_intro.py**](code/numpy_intro.py)

This script contains some examples to illustrate how to use numpy in Python.


[**profileme.py**](code/profileme.py)

This script illustrates profiling in Python.


[**profileme2.py**](code/profileme2.py)

This script also illustrates profiling in Python, but with a faster approach.


[**scipy_intro.py**](code/scipy_intro.py)

This script illustrates how to use scipy in Python.


[**subprocess_intro.py**](code/subprocess_intro.py)

This script illustrates subprocessing in Python.


[**TestR.py**](code/TestR.py)

This script illustrates running R from Python.


[**TestR.R**](code/TestR.R)

This script is used to illustrate how to run R from Python.


[**timeitme.py**](code/timeitme.py)

This script illustrates quick profiling with timeit in Python.


[**vectorization_revisited.py**](code/vectorization_revisited.py)

This script illustrates how to vectorize in Python.


[**oaks_debugme.py**](code/oaks_debugme.py)

This script writes a function to read data on oaks.


### **Author name and contact**

Lizzie Bru
eab21@ic.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 12 code files: vectorization_revisited.py, TestR.py, profileme.py, oaks_debugme.py, MyFirstJupyterNb.ipynb, profileme2.py, TestR.R, subprocess_intro.py, numpy_intro.py, scipy_intro.py, LV1.py, timeitme.py

======================================================================
Testing script/code files...

======================================================================
Inspecting script file vectorization_revisited.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates how to vectorize in Python"""

__author__ = 'Lizzie Bru (eab21@ic.ac.uk)'

import numpy as np
import matplotlib.pylab as p

# example to show the difference in runtime between a loop method and a vectorized method using numpy

# calculating a new array c in which each entry is the product of the two corresponding entries in a and b
def loop_product(a, b): # define a loop-based function to calculate this
    N = len(a)
    c = np.zeros(N)
    for i in range(N):
        c[i] = a[i] * b[i]
    return c


def vect_product(a, b): # define a vectorized function to calculate this
    return np.multiply(a, b) # multiply function from numpy = vectorized implementation of the elementwise product that we've explicitly written in the function loop_product


# compare these 2 functions on increasingly large randomly-generated 1D arrays:

import timeit

array_lengths = [1, 100, 10000, 1000000, 10000000]
t_loop = []
t_vect = []

for N in array_lengths:
    print("\nSet N=%d" % N)
    # randomly generate our 1D arrays of length N
    a = np.random.rand(N)
    b = np.random.rand(N)

    # time loop_product 3 times and save the mean execution time.
    timer = timeit.repeat('loop_product(a, b)', globals=globals().copy(), number=3)
    t_loop.append(1000 * np.mean(timer))
    print("Loop method took %d ms on average." % t_loop[-1])

    # time vect_product 3 times and save the mean execution time.
    timer = timeit.repeat('vect_product(a, b)', globals=globals().copy(), number=3)
    t_vect.append(1000 * np.mean(timer))
    print("vectorized method took %d ms on average." % t_vect[-1])

#--> vectorized method took 3ms on average vs loop method took 1372ms!!


# compare the timings on a plot:
p.figure()
p.plot(array_lengths, t_loop, label="loop method")
p.plot(array_lengths, t_vect, label="vect method")
p.xlabel("Array length")
p.ylabel("Execution time (ms)")
p.legend()
p.show()


# BUT: there are trade-offs: vectorizing increases RAM usage (because it involves storing parts of matrices rather than running each element one by one)

# if you try to vectorize a problem that's too large, you'll probably run into memory errors:
# for example if you make the same example as before even bigger:

N = 1000000000

a = np.random.rand(N)
b = np.random.rand(N)
c = vect_product(a, b)

# if no error, remove a, b, c from memory.
del a
del b
del c

#--> returns a memory error
**********************************************************************

Testing vectorization_revisited.py...

vectorization_revisited.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 10.00912s

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates running R from Python"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import subprocess

subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()

# telling the script to run the R script, redirect its output and save it into results, and also save the second file in the same way

# shell = True: tells subprocess, rather than just spawning a process from bash, to actually open up the terminal window and keep the shell there

# --> the 2 outputs do indeed appear in the results folder
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 99.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.08046s

======================================================================
Inspecting script file profileme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates profiling in Python"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

# example program:

def my_squares(iters):
    out = []
    for i in range(iters):
        out.append(i ** 2)
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += string.join(", ")
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")

# best way to profile this in Pycharm: click on Run > Profile 'profileme.py'

**********************************************************************

Testing profileme.py...

profileme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 5.21664s

======================================================================
Inspecting script file oaks_debugme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script writes a function to read data on oaks - the exercise is to debug it"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import csv
import sys
import doctest
from difflib import SequenceMatcher

# NOTE: I am taking the instruction of making this script able to 'handle cases where there is a typo etc' to mean: allow for leeway to include names which could be oaks but just have a typo in them

#Define function
def is_an_oak(name):
    """ Returns a measure of how similar a name is to 'Quercus' (i.e. how close it is to being an oak)

    >>> is_an_oak('Quercus')
    1.0

     >>> is_an_oak('Fraxinus')
     0.4

    whenever there is a typo, returns a value close enough to 1.0
    >>> is_an_oak('QQuercus')
    0.9333333333333333
    >>> is_an_oak('Quercuss')
    0.9333333333333333
    >>> is_an_oak('Quercyuss')
    0.875

    Let's define 'close enough' as being up to three typos:
    >>> is_an_oak('uwercuss')
    0.8

    """
    return SequenceMatcher(None, name.lower(), "quercus").ratio() # returns the similarity of the input name to 'quercus' as a ratio (.lower makes it all lower-case to standardize comparisons)


def main(argv):
    """Open the input data from TestOaksData.csv and write the outputs (= only the species which have names close enough to being oaks) to JustOaksData.csv"""
    f = open('../data/TestOaksData.csv','r') # this csv contains 5 oak species names laid out in 2 columns (genus & species)
    g = open('../data/JustOaksData.csv','w') # this csv is empty
    taxa = csv.reader(f)
    csvwrite = csv.writer(g)
    oaks = set()
    for row in taxa:
        print(row)
        print ("The genus is: ") 
        print(row[0] + '\n')
        if is_an_oak(row[0]) == 1.0: # if it's got the exact name 'Quercus'
            print('FOUND AN OAK!\n')
            csvwrite.writerow([row[0], row[1]])
        elif is_an_oak(row[0]) >= 0.8: # if it's 'close enough' to being an oak (defined here as having a similarity of 0.8)
            print('Close enough to being an oak - but check for typos') # that way it flags the uncertainty and you can manually check these
    f.close() # need to close the csvs after opening them
    g.close()
    return 0
    
if (__name__ == "__main__"):
    status = main(sys.argv)

doctest.testmod() # to run with embedded tests
**********************************************************************

Testing oaks_debugme.py...

oaks_debugme.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Current Points = 97.5

Output (only first 500 characters): 


**********************************************************************
['Genus', ' species']
The genus is: 
Genus

['Quercus', ' robur']
The genus is: 
Quercus

FOUND AN OAK!

['Fraxinus', ' excelsior']
The genus is: 
Fraxinus

['Pinus', ' sylvestris']
The genus is: 
Pinus

['Quercus', ' cerris']
The genus is: 
Quercus

FOUND AN OAK!

['Quercus', ' petraea']
The genus is: 
Quercus

FOUND AN OAK!


**********************************************************************

Code ran without errors

Time consumed = 0.05430s

======================================================================
Inspecting script file MyFirstJupyterNb.ipynb...

File contents are:

**********************************************************************
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "68fb62d9",
   "metadata": {},
   "source": [
    "**Examples of what you can do in jupyter**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d452d7da",
   "metadata": {},
   "source": [
    "Can write equations using standard LaTeX environments:"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "516f0d91",
   "metadata": {},
   "source": [
    "$$\n",
    "    \\frac{dN}{dt} = rN \\left( 1-\\frac{N}{K}\\right)\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e2f24e5",
   "metadata": {},
   "source": [
    "Can also run code in both Python and R:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1c270c2b",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is python!\n"
     ]
    }
   ],
   "source": [
    "a = \"this is python!\"; print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cc8af60e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "this is R!"
     ]
    }
   ],
   "source": [
    "a <- \"this is R!\"; cat(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17a12f09",
   "metadata": {},
   "source": [
    "Graphics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e850342c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_34177/799143421.py:4: DeprecationWarning: scipy.arange is deprecated and will be removed in SciPy 2.0.0, use numpy.arange instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
      "/tmp/ipykernel_34177/799143421.py:4: DeprecationWarning: scipy.sin is deprecated and will be removed in SciPy 2.0.0, use numpy.sin instead\n",
      "  x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as p\n",
    "import scipy as sc\n",
    "\n",
    "x = sc.arange(0, 5, 0.1); y = sc.sin(x)\n",
    "p.plot(x, y); p.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7a41bdc",
   "metadata": {},
   "source": [
    "Same in R:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bcec8cc4",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Loading required package: ggplot2\n",
      "\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYwAAAEsCAMAAADn+3SWAAAC+lBMVEUAAAABAQECAgIDAwME\nBAQFBQUGBgYHBwcICAgJCQkKCgoLCwsMDAwNDQ0ODg4PDw8QEBARERESEhITExMUFBQVFRUW\nFhYXFxcYGBgZGRkaGhobGxscHBwdHR0eHh4fHx8gICAhISEiIiIjIyMkJCQlJSUmJiYnJyco\nKCgpKSkqKiorKyssLCwtLS0uLi4vLy8wMDAxMTEyMjIzMzM0NDQ1NTU2NjY3Nzc4ODg5OTk6\nOjo7Ozs8PDw9PT0+Pj4/Pz9AQEBBQUFCQkJDQ0NERERFRUVGRkZHR0dJSUlKSkpLS0tMTExN\nTU1OTk5PT09QUFBRUVFSUlJTU1NUVFRVVVVWVlZXV1dYWFhZWVlaWlpbW1tcXFxdXV1eXl5f\nX19gYGBhYWFiYmJjY2NkZGRlZWVmZmZnZ2doaGhpaWlqampra2tsbGxtbW1ubm5vb29wcHBx\ncXFycnJzc3N0dHR1dXV2dnZ3d3d4eHh5eXl6enp7e3t8fHx9fX1+fn5/f3+AgICBgYGCgoKD\ng4OEhISFhYWGhoaHh4eIiIiJiYmKioqLi4uMjIyNjY2Ojo6Pj4+QkJCRkZGSkpKTk5OUlJSV\nlZWWlpaXl5eYmJiZmZmampqbm5ucnJydnZ2enp6fn5+goKChoaGioqKjo6OkpKSlpaWmpqan\np6eoqKipqamqqqqrq6usrKytra2urq6vr6+wsLCxsbGysrK0tLS1tbW2tra3t7e4uLi5ubm6\nurq7u7u8vLy9vb2+vr6/v7/AwMDBwcHCwsLDw8PExMTFxcXGxsbHx8fIyMjJycnKysrLy8vM\nzMzNzc3Ozs7Pz8/Q0NDR0dHS0tLT09PU1NTV1dXW1tbX19fY2NjZ2dna2trb29vc3Nzd3d3e\n3t7f39/g4ODh4eHi4uLj4+Pk5OTl5eXm5ubn5+fo6Ojp6enq6urr6+vs7Ozt7e3u7u7v7+/w\n8PDx8fHy8vLz8/P09PT19fX29vb39/f4+Pj5+fn6+vr7+/v8/Pz9/f3+/v7///8yS3CPAAAA\nCXBIWXMAABJ0AAASdAHeZh94AAAV1UlEQVR4nO2de3wU1dnHn01CLhgUUUAEgvoiF+1bLWkV\ni6KoaIXkFQGpGBFUFFAURMQLFbFSLRUFWqkivgi+1RaMaBWlgApoBCHhHoGIJEDI5QAh98te\n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\nqo4IAAAAAElFTkSuQmCC",
      "text/plain": [
       "plot without title"
      ]
     },
     "metadata": {
      "image/png": {
       "height": 150,
       "width": 198
      }
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "require(ggplot2)\n",
    "library(repr)# to resize plot within jupyter - this package is part of IRKernel\n",
    "options(repr.plot.width=3.3,repr.plot.height=2.5)\n",
    "\n",
    "x <- seq(0, 5, 0.1); y <- sin(x)\n",
    "qplot(x, y, geom = \"line\") # large figure"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2691a3a1",
   "metadata": {},
   "source": [
    "Pandas Python package"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "07ac0289",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.25.3'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "pd.__version__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "842d1146",
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy as sc"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b0857b6",
   "metadata": {},
   "source": [
    "documentation:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a1299fdc",
   "metadata": {},
   "outputs": [],
   "source": [
    "pd?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48be4e25",
   "metadata": {},
   "source": [
    "Pandas dataframes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6efa49cc",
   "metadata": {},
   "source": [
    "can import data using pd.read_csv or can also make dataframes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "91470c37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF = pd.DataFrame({\n",
    "   'col1': ['Var1', 'Var2', 'Var3', 'Var4'],\n",
    "   'col2': ['Grass', 'Rabbit', 'Fox', 'Wolf'],\n",
    "   'col3': [1, 2, sc.nan, 4]\n",
    "})\n",
    "\n",
    "MyDF"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2d97bd7b",
   "metadata": {},
   "source": [
    "Examine data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "de4dfc9c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "34da439e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col1</th>\n",
       "      <th>col2</th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Var1</td>\n",
       "      <td>Grass</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Var2</td>\n",
       "      <td>Rabbit</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Var3</td>\n",
       "      <td>Fox</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Var4</td>\n",
       "      <td>Wolf</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   col1    col2  col3\n",
       "0  Var1   Grass   1.0\n",
       "1  Var2  Rabbit   2.0\n",
       "2  Var3     Fox   NaN\n",
       "3  Var4    Wolf   4.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "70f91b82",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4, 3)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5defb021",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(MyDF)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "9179cae7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['col1', 'col2', 'col3'], dtype='object')"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5ba9c468",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "col1     object\n",
       "col2     object\n",
       "col3    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3e8c6db4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['Var1', 'Grass', 1.0],\n",
       "       ['Var2', 'Rabbit', 2.0],\n",
       "       ['Var3', 'Fox', nan],\n",
       "       ['Var4', 'Wolf', 4.0]], dtype=object)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01bd3359",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>col3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.527525</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>4.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           col3\n",
       "count  3.000000\n",
       "mean   2.333333\n",
       "std    1.527525\n",
       "min    1.000000\n",
       "25%    1.500000\n",
       "50%    2.000000\n",
       "75%    3.000000\n",
       "max    4.000000"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyDF.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a1f1e54",
   "metadata": {},
   "source": [
    "Can also develop and analyze mathematical models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ed01c747",
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "b7299fad",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sympy import *\n",
    "import scipy as sc\n",
    "init_printing()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "236aa0c8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sympy.core.symbol.Symbol"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = var('x') # create symbolic variable to work with\n",
    "type(x) # check its class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "41c3c5ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "a, b, c, = var(\"a, b, c\") # create multiple symbolic variables at one go"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "eb0d179c",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = var('x', real = True) # often important to add assumptions\n",
    "x.is_imaginary # check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "42d8e529",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = Symbol('x', positive = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "2e7afd35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAACoAAAAOCAYAAABZ/o57AAAACXBIWXMAAA7EAAAOxAGVKw4bAAAB0UlEQVRIDb2W7U0CQRCGD0IBqB1oBxAqEDuA2IF0oH/5Z6ADtAKFDqAEpAOxA0MH+Dzn7uVyhFNAb5JhZudj592vOWrb7TYZDodvSZI04Q38GWQLKWlbw/rPg1yTc4NeGTVCJUH1KT6LldHv0UfwAP0pZ++hP8dxVbIOCHdqlgdZVjzELcti/sNXZ1KPc37g5KuwwAPTjg8XqDvqHTyE3gl2gZVRg51ZHVHNhU3JvUQ+wo47cBfuwy7ee6x/QZy2BHmHGMBpHuOx9kiMtT/AbsQF3MRmfFL351Ai2eLtkHcV5ATpo+zi82rot4MIOiVsPsprOLN9e9JFmGv3GRE3hlPASG3HATUxkEAE5mN0V8+QWYdgvHOl8G9CblFMMbyGeVIfujveQvZieyom/XZs0QxMCYjS+chzNz32dPcKwV7NzqlAndNdPZUEKbUB7T3Ok1dq+RdA9x1lvthPejyVOUCzj04+qZ4fVKEDJO5eVg6bx+uCbzNjTsHfPRVok/nkfeSHpAjMFiYo20+e7AY+TP0ZMfYzvq75pyRSCLLn2cxNEISTLmDv4oQYW48++5vf/eh/wb5zbNi8Y5K90dhX+AOWlvizPzfoLsq2JMVeas31Fx2vogF49TMKAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\text{True}$"
      ],
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x > 0 # check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7f9be0bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAC0AAAAPCAYAAABwfkanAAAACXBIWXMAAA7EAAAOxAGVKw4bAAACVUlEQVRIDdWW21FbMRCGZYYCGKgASsCkAkwHMHSQdJAMT/YbAx1AKgjQAVABIR3EHYS4A+f7BJvRuZhzDsMLO7NnV9K/F61WskfT6XQ3pXQCKzdh6e5Z5O8G3x041rZns9miWG9VwejvO6ztHeOjVuAbJkfL5TKb4XSCcgsb4KDu62X9mvl99F/19VVjsI+szZHvlvRaEWz+ordWkaBW/xts5YbQ0xBwH2yZdB/8FaChSffxOwjTmTQV3oHt64RsPYVBEd8BvN7Dh71ua+SESfxcG+RnRN4Mcss56LTPxsB4SfWrz/BxzPyYcSZ0T9R2/A3rf4O5L8j0atKFYfmaJOYPsT2Dx+j5LiAvGN87B68kcCZ5hqxcdsY5IQ3R3VT2hR7+v6I/wuO29piwcC1jKPftYbG72HXh98DtgYsKM8zkpoP0dQUmHoeE7gnr/7Ct0pU3FVDpLDtl7gZFTugGN5FK5VxrI/D690X5q470mb1Bj7azym7cp7JOPrWf2pKuA3XaIILkY2ZhE/4BPzRAqydsIX/Qos1sl0vYFomTsvW8NyVZwJ+dSWOYK1paMmcwf+2O0HO/I61QJ4EzqSekl0xO6CZ3gTSpaIlbxo3Y4tf8vIGi58oLasUzEey13nZzlQqCv2TOBO11W2ABH8MNYn1SJh0XI2TDoGMiKq19HPEqkxOC1+M4jiLso/sgTEoHjH2x5qPiD5OBDLyAw9h3151XiDlx9qR97HFqa7WiTz1mfTiOwI5tB7Fe2j9wkO+w7RBxE7q43D7IeKttofn/P0xh/RHkP0QG2/u59wGyAAAAAElFTkSuQmCC\n",
      "text/latex": [
       "$\\displaystyle \\text{False}$"
      ],
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x < 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d8e30e6",
   "metadata": {},
   "source": [
    "Can define equations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "e6810726",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAEgAAAAaCAYAAAAUqxq7AAAACXBIWXMAAA7EAAAOxAGVKw4bAAADRklEQVRYCe2Y0VEbMRCGDyYFeFKC04GJKwh0QJIKwB3g4cl+y5AOIBUkoQOTCiB0YEog14Hzf2dJs3c++3QhyMmZnVmvtNJpd//blXTeWywW2a7TdDrtCYNzh0PfyRPp81e7Do6L/0JgjDwWal+q/VP8Zt8rd1yeCpRDg8GF2n3pBi8ALVEhe+4MQKG597IHBSxCQ5lDBh1LrpaYlH6TCg/87402MWnuAHDEB8RdKjENnknHhK4R+wmxbSQHJNlzoHbO5FBiUoDaUHLMQNdIcQFQLnlVF5v0VM5YsjjNXH8JkDrcA35IFmlVt0AXdIqPo/udZJEdPib1AYej3SYHQI39PYi0YkIyklMcq6R+7Rt9JkeIkVjDncfZATiSBBlIvo0yTrHJZPILmZJl81h8ltKmj1V2e7F294USe89DgK37DWL9EBsmJXYkvln3gAAk9U7d+FDyREzNfnS6W825du0kQvYoE3zCt3V0pXnVUmIusRJzVGlzzL8Vz8XriO+Uz7Am3Iq/iA/VZ0PDQZxNRrLr7b2XURi/OFyKTdW1OabrwNFwESsvOIrIIIJ8rJstI7wl7xBTcjElSRZBr8V2vFA+14/84Y4WMlZ9ju5LyQcxm/6N5H2DfWJtBRBBEngd3WHcDPCm7qUr5kvyBjeS5nBy4HyVsJtpvO5NY2NlbekI3gJwJB0ZBA3FMWVDPCRFFJFBa8k5ZMfZ3D5ZRVNba9QBkElPJnLM+wCbliqN6zmyyb7YgXS2X5pvOpsSwkxbNtmDSLlGRGWcLGBe2JCl68HSbYMAfmYMx5YN/hJzFAEQKbeyuAt+5oBhMRziqm5L7lz9nMGUhG+yx/74zdo1vlp1tU0G2Riq46U+AFHT1G+VyBj40TlUQt05w6m2DQIcNubqy+H4bqJiH22a5MfZg76Kv3uFkdwX2PQAKZMzIzEZxabLlRzgQrkxJyEBhP1uwnSsL8RTuy+yyAq56/dc1+9B7PX7b8zbxqeGbPbF8zb+U2IQd5l4VItHnvxDeVRL5MmLNixA1rW7t3k0hewMhH2/a9Jlz6xtXD6DAJ6LWdK/PDCakIitdZWEfxRxVJsuxz1/Vv/R5Y01/kVSPHySXEtGH+8+jt/Eu3Ka1sxn6gAAAABJRU5ErkJggg==\n",
      "text/latex": [
       "$\\displaystyle \\left(x + \\pi\\right)^{2}$"
      ],
      "text/plain": [
       "       2\n",
       "(x + π) "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MyFun = (pi + x)**2; MyFun"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd1dc3b7",
   "metadata": {},
   "source": [
    "--> also lots more stuff you can do with equations etc - see Mathematical models in Jupyter section of the notes"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

**********************************************************************

Testing MyFirstJupyterNb.ipynb...

======================================================================
Inspecting script file profileme2.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates profiling in Python - using an alternative approach to make it faster"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

# alternative approach to the same program as in profileme.py:

def my_squares(iters):
    out = [i ** 2 for i in range(iters)]
    return out

def my_join(iters, string):
    out = ''
    for i in range(iters):
        out += ", " + string
    return out

def run_my_funcs(x,y):
    print(x,y)
    my_squares(x)
    my_join(x,y)
    return 0

run_my_funcs(10000000,"My string")

# best way to profile this in Pycharm: click on Run > Profile 'profileme2.py'
##--> shows that it's faster than 'profileme.py'
**********************************************************************

Testing profileme2.py...

profileme2.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string

**********************************************************************

Code ran without errors

Time consumed = 3.05343s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
# Author: Lizzie Bru eab21@imperial.ac.uk
# Script: TestR.R
# Desc: R script to use to demonstrate how to run R from Python
# Date: Nov 2021

print("Hello, this is R!")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.05333s

======================================================================
Inspecting script file subprocess_intro.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates subprocessing in Python"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import subprocess

#--> using subprocess: can run non-Python commands & scripts, obtain their outputs, and crawl through & manipulate directories


# try running some commands in the UNIX bash:
p = subprocess.Popen(["echo", "I'm talkin' to you, bash!"], # command line arguments passed as a list of strings to avoid needing to escape quotes
                     stdout=subprocess.PIPE, # output from the process spawned by the command
                     stderr=subprocess.PIPE) # error code from which you capture whether the process ran successfully or not
#--> creates an object p, from which you can extract the output and other info of the command you ran: the method PIPE creates a new "pipe" to the output of the "child" process

stdout, stderr = p.communicate()


# check what's in stderr and stdout

stderr
# --> nothing here bc the echo command doesn't return any code
# the b indicates that the output is unencoded

stdout

# encode and print it:
print(stdout.decode())

# can also use universal_newlines = True to make the outputs be returned as encoded text with line endings converted to '\n'
p = subprocess.Popen(["echo", "I'm talkin' to you, bash!"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines = True)
stdout, stderr = p.communicate()
stdout # don't need to decode it this time


# trying something else:
p = subprocess.Popen(["ls", "-l"], stdout=subprocess.PIPE)
stdout, stderr = p.communicate()
print(stdout.decode()) # lists all files in a long listing format


# can also call python itself from bash:
p = subprocess.Popen(["python3", "../../week2/code/boilerplate.py"], # need to give it the relative path to boilerplate
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE) # A bit silly!
stdout, stderr = p.communicate()
print(stdout.decode())
#--> telling python to run bash to open python and run boilerplate


# can also compile a latex document like this:
subprocess.os.system("pdflatex ../../week1/code/FirstExample")
# can also do it this way:
p = subprocess.Popen(["pdflatex", "../../week1/code/FirstExample.tex"], # need to give it the relative path to boilerplate
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE) # A bit silly!
stdout, stderr = p.communicate()
print(stdout.decode())


## Handling directory and file paths:

# e.g. to assign paths:
subprocess.os.path.join('directory', 'subdirectory', 'file')

# can catch the output of subprocess so that you can then use the output within your python script
MyPath = subprocess.os.path.join('directory', 'subdirectory', 'file')
MyPath


## Running R

# you can run R from Python easily

# have to make an R script first so that python has something to run

# --> see TestR.R and TestR.py scripts for more on this



# NB: need to explicitly tell subprocess to tell you if there are errors - it won't do it automatically!



**********************************************************************

Testing subprocess_intro.py...

subprocess_intro.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
I'm talkin' to you, bash!

total 92
-rw-rw-r-- 1 alexander alexander  2342 Dec  5 10:15 LV1.py
-rw-rw-r-- 1 alexander alexander 45096 Dec  5 10:15 MyFirstJupyterNb.ipynb
-rw-rw-r-- 1 alexander alexander  2841 Dec  5 10:15 numpy_intro.py
-rwxrwxr-x 1 alexander alexander  2325 Dec  5 10:15 oaks_debugme.py
-rw-rw-r-- 1 alexander alexander   673 Dec  5 10:15 profileme2.py
-rw-rw-r-- 1 alexander alexander   560 Dec  5 10:15 profileme.py
-rw-rw-r-- 1 alexander alexander  3499 Dec  5 10:15 scipy_intro.p
**********************************************************************

Encountered error (or warning):
sh: 1: pdflatex: not found
Traceback (most recent call last):
  File "subprocess_intro.py", line 58, in <module>
    stderr=subprocess.PIPE) # A bit silly!
  File "/usr/lib/python3.5/subprocess.py", line 947, in __init__
    restore_signals, start_new_session)
  File "/usr/lib/python3.5/subprocess.py", line 1551, in _execute_child
    raise child_exception_type(errno_num, err_msg)
FileNotFoundError: [Errno 2] No such file or directory: 'pdflatex'

======================================================================
Inspecting script file numpy_intro.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Introduction to numpy"""
__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import numpy as np

# example of making a 1D array
a = np.array(range(5))
a
print(type(a))
print(type(a[0]))

# can also specify the data type of the array:
# can make it a float:
a = np.array(range(5), float)
a
a.dtype # to check type
x = np.arange(5) # can make a 1D array this way
x
x = np.arange(5.) # directly specify float using decimal
x

# to see dimensions:
x.shape


# can convert to and from python lists:
b = np.array([i for i in range(10) if i % 2 == 1]) #odd numbers between 1 and 10
b

# convert back to list
c = b.tolist() #convert back to list
c

# need a 2D numpy array to make a matrix
mat = np.array([[0, 1], [2, 3]])
mat
mat.shape


# indexing and accessing arrays:
mat[1]

mat[:,1] # accessing whole second column

mat[0,0] # 1st row, 1st column element

mat[1,0] # 2nd row, 1st column element

mat[:,0] # whole first column

mat[0,1]

mat[0,-1] # also accepts negative values for going back to the start from the end of an array

mat[-1,0]

mat[0,-2]


# manipulating arrays:
mat[0, 0] = -1
mat

mat[:,0] = [12,12] #replace whole column
mat

np.append(mat, [[12,12]], axis = 0) #append row, note axis specification

np.append(mat, [[12],[12]], axis = 1) #append column

newRow = [[12,12]] #create new row

mat = np.append(mat, newRow, axis = 0) #append that existing row
mat

np.delete(mat, 2, 0) #Delete 3rd row

# concatenation:
mat = np.array([[0, 1], [2, 3]])
mat0 = np.array([[0, 10], [-1, 3]])
np.concatenate((mat, mat0), axis = 0)


# flattening of reshaping arrays:

mat.ravel() # flattens it from a matrix to a vector

mat.reshape((4,1)) # un-flattens it to dimensions (4,1)

mat.reshape((1,4)) # the same but with different dimensions

mat.reshape((3,1)) # ditto

mat.reshape((3,1))
# gives an error bc the total no. of elements has to stay the same!


# pre-allocating arrays
np.ones((4,2)) # initialising an array with 4 rows and 2 columns and filled with just ones
np.zeros((4,2)) # can also do it with zeros
m = np.identity(4) # creating an identity matrix
m
m.fill(16) # fill the matrix with 16
m


# numpy matrices

# can perform some common matrix-vector operations on arrays:

mm = np.arange(16)
mm = mm.reshape(4,4) #Convert to matrix
mm

mm.transpose() # just a normal matrix transpose

mm + mm.transpose() # normal matrix arithmetic

mm - mm.transpose() # ditto

mm * mm.transpose() # Note that this is element-wise multiplication

mm // mm.transpose()

mm // (mm + 1).transpose()

mm * np.pi

mm.dot(mm) # No this is matric multiplication, or the dot product

mm = np.matrix(mm) # convert to scipy/numpy matrix class
mm

print(type(mm))

mm * mm # instead of mm.dot(mm) --> makes multiplication syntactically easier

#--> BUT: don't use the numpy matrix class cause it might be removed in future







**********************************************************************

Testing numpy_intro.py...

numpy_intro.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 96.0

Output (only first 500 characters): 


**********************************************************************
<class 'numpy.ndarray'>
<class 'numpy.int64'>

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "numpy_intro.py", line 94, in <module>
    mat.reshape((3,1)) # ditto
ValueError: cannot reshape array of size 4 into shape (3,1)

======================================================================
Inspecting script file scipy_intro.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Introduction to scipy"""
__author__ = 'Lizzie Bru eab21@ic.ac.uk'

# useful for more complex numerical operations

# can do linear model fitting etc like in R but in python using the scipy package

import numpy as np
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

# e.g. generate 10 samples from normal distribution:
sc.stats.norm.rvs(size = 10)

# can seed random numbers to get the same sequence
np.random.seed(1234)
sc.stats.norm.rvs(size = 10) # NB: if you run just this line a second time it doesn't come out the same as the first time (bc set.seed only applies to the next one time)

# often a more robust way is just to use the random_state argument for each specific generation of a set of random numbers
sc.stats.norm.rvs(size=5, random_state=1234)

# example of generating random integers between 1 and 10
sc.stats.randint.rvs(0, 10, size = 7)

# and doing it with random seed:
sc.stats.randint.rvs(0, 10, size = 7, random_state=1234)

sc.stats.randint.rvs(0, 10, size = 7, random_state=3445) # a different seed



# numerical integration using scipy.integrate

# e.g. calculate the area under an arbitrary curve

y = np.array([5, 20, 18, 19, 18, 7, 4]) # The y values; can also use a python list here

p.plot(y)

area = integrate.trapz(y, dx = 2)
print("area =", area)

area = integrate.trapz(y, dx = 1)
print("area =", area) # changing dx changes the spacing between points of the curve and therefore changes the area

area = integrate.trapz(y, dx = 3)
print("area =", area)


# can do the same using Simpson's rule: (slightly more computationally intensive but more accurate)
area = integrate.simps(y, dx = 2)
print("area =", area)

area = integrate.simps(y, dx = 1)
print("area =", area)

area = integrate.simps(y, dx = 3)
print("area =", area)


# Numerical integration for solving the Lotka-Volterra model
 # define a function that returns growth rate of consumer & resource popn at any given timestep
 # (i.e. basically just writes the equations into one readable format for further analysis)_
def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C

    return np.array([dRdt, dCdt])
type(dCR_dt)

# now assign some parameter values:
r = 1.
a = 0.1
z = 1.5
e = 0.75

# define the time vector:
t = np.linspace(0, 15, 1000) # = integrate from time point 0 to 15, using 1000 sub-divisions of time

# set the initial conditions for the two populations and convert the two into an array
ro = 10
co = 10
rco = np.array([ro, co])

# numerically integrate this system forward from those starting conditions:
pops, infodict = integrate.odeint(dCR_dt, rco, t, full_output = True)
# -- this function integrates within some given limits
# -- have to give it a function to integrate (in this case the 2 L-V model functions)
# -- rco = telling it where to start
# -- pops = the actual answer to the question (= the first entry of the array)
# -- infodict = 2nd entry of the array = just a dictionary of the output
pops
type(infodict)
infodict.keys()
infodict['message'] # it worked!

# visualize the results:

f1 = p.figure()

p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')
p.show()# To display the figure

# save the figure as a pdf:
f1.savefig('../results/LV_model.pdf')
**********************************************************************

Testing scipy_intro.py...

scipy_intro.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 95.5

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):
Traceback (most recent call last):
  File "scipy_intro.py", line 16, in <module>
    sc.stats.norm.rvs(size = 10)
AttributeError: module 'scipy' has no attribute 'stats'

======================================================================
Inspecting script file LV1.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""Python II practical: illustrating numerical integration and plotting"""
__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import numpy as np
import scipy as sc
import scipy.integrate as integrate
import matplotlib.pylab as p

# Numerical integration for solving the Lotka-Volterra model
 # define a function that returns growth rate of consumer & resource popn at any given timestep
 # (i.e. basically just writes the equations into one readable format for further analysis)_
def dCR_dt(pops, t=0):

    R = pops[0]
    C = pops[1]
    dRdt = r * R - a * R * C
    dCdt = -z * C + e * a * R * C

    return np.array([dRdt, dCdt])
type(dCR_dt)

# now assign some parameter values:
r = 1.
a = 0.1
z = 1.5
e = 0.75

# define the time vector:
t = np.linspace(0, 15, 1000) # = integrate from time point 0 to 15, using 1000 sub-divisions of time

# set the initial conditions for the two populations and convert the two into an array
ro = 10
co = 5
rco = np.array([ro, co])

# numerically integrate this system forward from those starting conditions:
pops, infodict = integrate.odeint(dCR_dt, rco, t, full_output = True)
# -- this function integrates within some given limits
# -- have to give it a function to integrate (in this case the 2 L-V model functions)
# -- rco = telling it where to start
# -- pops = the actual answer to the question (= the first entry of the array)
# -- infodict = 2nd entry of the array = just a dictionary of the output
pops
#--> this array has 1000 rows, each corresponding to a time
#--> in each row there's a pair of numbers: R and C for each time point
type(infodict)
infodict.keys()
infodict['message'] # it worked!

# visualize the results:
import matplotlib.pylab as p

# plot population density against time:
f1 = p.figure()
p.plot(t, pops[:,0], 'g-', label='Resource density') # Plot
p.plot(t, pops[:,1]  , 'b-', label='Consumer density')
p.grid()
p.legend(loc='best')
p.xlabel('Time')
p.ylabel('Population density')
p.title('Consumer-Resource population dynamics')

# plot consumer density against resource density:
f2 = p.figure()
p.plot(pops[:,0], pops[:,1], "r-")
p.grid()
p.xlabel('Resource density')
p.ylabel('Consumer density')
p.title('Consumer-Resource population dynamics')

# save the figures as pdfs:
f1.savefig('../results/LV_model.pdf')
f2.savefig('../results/LV_model2.pdf')
**********************************************************************

Testing LV1.py...

LV1.py is a Python script file;

checking for docstrings...

Found one or more docstrings and functions

Missing docstring, either in one or functions and/or at the script level

Current Points = 95.0

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.76973s

======================================================================
Inspecting script file timeitme.py...

File contents are:

**********************************************************************
#!/usr/bin/env python3

"""This script illustrates quick profiling with timeit in Python"""

__author__ = 'Lizzie Bru eab21@ic.ac.uk'

import timeit

##############################################################################
# loops vs. list comprehensions: which is faster?
##############################################################################

iters = 1000000

from profileme import my_squares as my_squares_loops

from profileme2 import my_squares as my_squares_lc

##############################################################################
# loops vs. the join method for strings: which is faster?
##############################################################################

mystring = "my string"

from profileme import my_join as my_join_join

from profileme2 import my_join as my_join

# don't use magic commands in Pycharm: instead use:

import time
start = time.time()
my_squares_loops(iters)
print("my_squares_loops takes %f s to run." % (time.time() - start)) # could also specify an end() and use the difference between start and end

start = time.time()
my_squares_lc(iters)
print("my_squares_lc takes %f s to run." % (time.time() - start))






**********************************************************************

Testing timeitme.py...

timeitme.py is a Python script file;

checking for docstrings...

Found no functions, but one docstring for the script, good

Current Points = 95.0

Output (only first 500 characters): 


**********************************************************************
10000000 My string
10000000 My string
my_squares_loops takes 0.256161 s to run.
my_squares_lc takes 0.209442 s to run.

**********************************************************************

Code ran without errors

Time consumed = 8.61891s

======================================================================
======================================================================
Finished running scripts

Ran into 3 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 95.0

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!